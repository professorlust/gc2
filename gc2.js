// Generated by CoffeeScript 1.4.0
(function() {
  var Generator, Item, PlusMarker, animate_plus_markers, arceus, ball01, ball02, ball99, basedata, bitfield_to_sstr, bitmap, cave, church, click1, cloninglab, cursor, daycare, export_save, farm, fountain, gcm1, gcm2, gcm3, gcm4, gcm5, gcminer, gen, generators, gens, goodra, goomy, hexstr, import_save, init_cooldown_time, init_input, item_ids, itemlist, items, last_update_time, load_save_from_local_storage, ngens, photoncollider, plus_marker_anims, plus_marker_distance, plus_marker_id, plus_marker_origradius, plus_markers, recalc, recalc_gpc, recalc_gps, regenerate_tooltips, reserve, rngabuser, save_to_local_storage, shiny_goomy, sliggoo, sstr_to_bitfield, start_if_loaded, startup, trench, update, updateF, update_all_numbers, update_language, update_numbers, youngster, youngster01, youngster02, youngster03, youngster04, youngster05, youngster06, youngster07, youngster08, youngster09, youngster10, youngster11, youngster12, youngsterpocalypse, _i, _import_save_0_05, _import_save_0_10, _len,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  basedata = {
    version: "0.363 (pre-alpha)",
    game_started: false,
    goomies: 0,
    total_goomies: 0,
    total_total_goomies: 0,
    play_time: 0,
    total_play_time: 0,
    last_save_time: new Date(),
    gps: 0,
    expps: 0,
    gpc: 1,
    sliggoo_gpsmult: 1.0,
    raindance_mult: 1.0,
    frenzy_clickmult: 1.0,
    exp_clickmult: 1.0,
    clicks: 0,
    total_clicks: 0,
    earn: function(n) {
      this.goomies += n;
      this.total_goomies += n;
      return this.total_total_goomies += n;
    },
    click: function() {
      var gain;
      if (!this.game_started) {
        this.game_started = true;
      }
      gain = this.gpc;
      this.earn(gain);
      this.clicks += 1;
      this.total_clicks += 1;
      goomy.gain_exp(goomy.level * this.exp_clickmult);
      return gain;
    },
    update: function(ms) {
      var exp_gain, gain;
      gain = this.gps * ms / 1000;
      this.earn(gain);
      exp_gain = this.expps * ms / 1000;
      goomy.gain_exp(exp_gain);
      if (this.game_started) {
        this.play_time += ms;
        return this.total_play_time += ms;
      }
    },
    reset: function() {
      var generator, item, _i, _j, _len, _len1;
      sliggoo.gain_exp(this.total_goomies / 1e12);
      goodra.gain_exp(goomy.exp / 1e4);
      this.sliggoo_gpsmult = 1.0 + 0.1 * sliggoo.level;
      goomy.level_cap = 100 + goodra.level;
      this.goomies = 0;
      this.total_goomies = 0;
      goomy.exp = 0;
      goomy.level = 1;
      goomy.next_lv_exp = 100;
      goomy.lv_total_exp = 0;
      this.game_started = false;
      this.play_time = 0;
      this.clicks = 0;
      for (_i = 0, _len = generators.length; _i < _len; _i++) {
        generator = generators[_i];
        generator.count = 0;
        generator.cost = generator.base_cost;
        generator.level = 1;
        generator.upgrades = [];
      }
      for (_j = 0, _len1 = itemlist.length; _j < _len1; _j++) {
        item = itemlist[_j];
        item.bought = false;
      }
      recalc();
      update_all_numbers();
      return regenerate_tooltips();
    }
  };

  this.basedata = basedata;

  gens = {};

  generators = [];

  Generator = (function() {

    function Generator(name) {
      this.name = name;
      this.base_gps = 0.0;
      this.premult_gps = 0.0;
      this.gps = 0.0;
      this.level = 1;
      this.level_mult = 1.0;
      this.base_cost = 20;
      this.cost = this.base_cost;
      this.lvup_cost = this.base_cost * 100;
      this.count = 0;
      this.cost_f = function(n) {
        return Math.floor(this.base_cost * Math.pow(n + 10, Math.log(n + 10) / Math.log(10)) / 10);
      };
      gens[name] = this;
      generators.push(this);
    }

    Generator.prototype.buy = function(n) {
      var i, _i;
      for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
        if (basedata.goomies < this.cost) {
          recalc();
          return i - 1;
        }
        basedata.goomies -= this.cost;
        this.count += 1;
        this.cost = this.cost_f(this.count);
      }
      recalc();
      return n;
    };

    Generator.prototype.sell = function(n) {
      var i, _i;
      for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
        if (this.count <= 0) {
          recalc();
          return i - 1;
        }
        this.count -= 1;
        this.cost = this.cost_f(this.count);
        basedata.goomies += this.cost * 0.25;
      }
      recalc();
      return n;
    };

    Generator.prototype.levelup = function() {
      if (basedata.goomies < this.lvup_cost) {
        return false;
      }
      basedata.goomies -= this.lvup_cost;
      this.level += 1;
      this.lvup_cost = this.base_cost * 100 * Math.pow(1.5, this.level - 1);
      recalc();
      return true;
    };

    Generator.prototype.show_tooltip = function() {
      return $("#" + this.name).qtip("lol");
    };

    Generator.prototype.set_base_cost = function(cost) {
      this.base_cost = cost;
      return this.lvup_cost = this.base_cost * 100;
    };

    return Generator;

  })();

  cursor = new Generator("cursor");

  cursor.base_gps = 0.2;

  cursor.set_base_cost(20);

  youngster = new Generator("youngster");

  youngster.base_gps = 1.0;

  youngster.set_base_cost(100);

  daycare = new Generator("daycare");

  daycare.base_gps = 5.0;

  daycare.set_base_cost(600);

  reserve = new Generator("reserve");

  reserve.base_gps = 20.0;

  reserve.set_base_cost(3000);

  farm = new Generator("farm");

  farm.base_gps = 75.0;

  farm.set_base_cost(15000);

  fountain = new Generator("fountain");

  fountain.base_gps = 250.0;

  fountain.set_base_cost(70000);

  cave = new Generator("cave");

  cave.base_gps = 1000.0;

  cave.set_base_cost(400000);

  trench = new Generator("trench");

  trench.base_gps = 4000.0;

  trench.set_base_cost(2400000);

  arceus = new Generator("arceus");

  arceus.base_gps = 18000;

  arceus.set_base_cost(20000000);

  rngabuser = new Generator("rngabuser");

  rngabuser.base_gps = 65536;

  rngabuser.set_base_cost(134217728);

  cloninglab = new Generator("cloninglab");

  cloninglab.base_gps = 288000;

  cloninglab.set_base_cost(1440000000);

  church = new Generator("church");

  church.base_gps = 1920000;

  church.set_base_cost(24.192e9);

  gcminer = new Generator("gcminer");

  gcminer.base_gps = 16777216;

  gcminer.set_base_cost(549755813888);

  photoncollider = new Generator("photoncollider");

  photoncollider.base_gps = 299792458;

  photoncollider.set_base_cost(25902068371200);

  ngens = [daycare, reserve, farm, fountain, cave, trench, arceus, rngabuser, cloninglab, church, gcminer, photoncollider];

  for (_i = 0, _len = generators.length; _i < _len; _i++) {
    gen = generators[_i];
    gen.cost = gen.base_cost;
  }

  goomy = {
    exp: 0,
    level: 1,
    next_lv_exp: 100,
    lv_total_exp: 0,
    level_cap: 100,
    level_up: function() {
      this.level += 1;
      this.lv_total_exp += this.next_lv_exp;
      this.next_lv_exp = this.level * this.level * 100;
      recalc_gpc();
      update_all_numbers();
      return regenerate_tooltips();
    },
    gain_exp: function(exp) {
      var _results;
      this.exp += exp;
      if (this.level >= this.level_cap && this.exp > this.lv_total_exp) {
        this.exp = this.lv_total_exp;
      }
      _results = [];
      while (this.exp >= this.lv_total_exp + this.next_lv_exp && this.level < this.level_cap) {
        _results.push(this.level_up());
      }
      return _results;
    }
  };

  sliggoo = {
    exp: 0,
    level: 0,
    next_lv_exp: 25,
    lv_total_exp: 0,
    level_up: function() {
      this.level += 1;
      this.lv_total_exp += this.next_lv_exp;
      return this.next_lv_exp = (this.level + 5) * (this.level + 5);
    },
    gain_exp: function(exp) {
      var _results;
      this.exp += exp;
      _results = [];
      while (this.exp >= this.lv_total_exp + this.next_lv_exp) {
        _results.push(this.level_up());
      }
      return _results;
    }
  };

  goodra = {
    exp: 0,
    level: 0,
    next_lv_exp: 1000,
    lv_total_exp: 0,
    level_up: function() {
      this.level += 1;
      this.lv_total_exp += this.next_lv_exp;
      return this.next_lv_exp = this.level * 30 + 1000;
    },
    gain_exp: function(exp) {
      var _results;
      this.exp += exp;
      _results = [];
      while (this.exp >= this.lv_total_exp + this.next_lv_exp) {
        _results.push(this.level_up());
      }
      return _results;
    }
  };

  this.goomy = goomy;

  this.sliggoo = sliggoo;

  this.goodra = goodra;

  init_input = function() {
    var generator, _j, _k, _len1, _len2;
    $(".nano").nanoScroller();
    for (_j = 0, _len1 = ngens.length; _j < _len1; _j++) {
      generator = ngens[_j];
      $("#generators").append("<div class='generator' id='" + generator.name + "'></div>");
      $("#" + generator.name).append('<div class="generator-info"></div>');
      $("#" + generator.name).css("background-image", "url('img/" + generator.name + ".png')");
      $("#" + generator.name + " .generator-info").append("<span class='generator-count' id='" + generator.name + "_count'></span><br />			Next: <span class='generator-cost' id='" + generator.name + "_cost'>" + (reprnum(generator.base_cost, "en-US", "short")) + "</span>");
    }
    if ($(window).width() >= 1024) {
      for (_k = 0, _len2 = generators.length; _k < _len2; _k++) {
        generator = generators[_k];
        $("#" + generator.name).click((function(name) {
          return function() {
            return gens[name].buy(1);
          };
        })(generator.name));
      }
    }
    $("#goomy_container").mousedown(function(e) {
      var plus_marker;
      return plus_marker = new PlusMarker("+" + (reprnum(Math.floor(basedata.click()))), e.clientX - 10 + Math.random() * 20, e.clientY - 10 + Math.random() * 20);
    });
    $("#goomy_container").contextmenu(function() {
      return false;
    });
    $("#goomy_container").mousedown(function() {
      $("#great_goomy").css("width", "96%");
      return $("#great_goomy").css("top", "2%");
    });
    $("#goomy_container").mouseup(function() {
      $("#great_goomy").css("width", "100%");
      return $("#great_goomy").css("top", "0%");
    });
    $("#export_save_button").click(function() {
      var a;
      a = export_save();
      $("#export_save_string").val(sstr_to_b64(a));
      $("#export_qr_code")[0].getContext("2d").clearRect(0, 0, 200, 200);
      $("#export_qr_code").qrcode({
        text: a
      });
      return $("#export_save").show();
    });
    $("#about_button").click(function() {
      return $("#about").show();
    });
    $("#about_close").click(function() {
      return $("#about").hide();
    });
    return $("#export_close").click(function() {
      return $("#export_save").hide();
    });
  };

  items = {};

  itemlist = [];

  item_ids = {};

  Item = (function() {

    function Item(name, id) {
      this.name = name;
      this.display_name = "";
      this.description = "";
      this.caption = "";
      this.id = id;
      this.cost = 0;
      this.bought = false;
      this.locked = true;
      this.unlock_condition = function() {};
      this.buy = function() {
        if (this.locked || basedata.goomies < this.cost) {
          return false;
        }
        basedata.goomies -= this.cost;
        this.bought = true;
        return recalc();
      };
      items[name] = this;
      item_ids[id] = this;
      itemlist.push(this);
    }

    return Item;

  })();

  load_save_from_local_storage = function() {
    var generator, save_data, _j, _len1;
    if (window.localStorage.hasOwnProperty("gc2.savefile") && window.localStorage["gc2.savefile"] !== "") {
      save_data = import_save(b64_to_sstr(window.localStorage["gc2.savefile"]));
      last_update_time.setTime(save_data["save_time"].getTime());
      if (save_data["play_time"] !== -1) {
        basedata.game_started = true;
        basedata.play_time = save_data["play_time"];
      }
      basedata.total_play_time = save_data["total_play_time"];
      basedata.goomies = save_data["goomies"];
      basedata.total_goomies = save_data["total_goomies"];
      basedata.total_total_goomies = save_data["total_total_goomies"];
      basedata.clicks = save_data["clicks"];
      basedata.total_clicks = save_data["total_clicks"];
      goomy.gain_exp(save_data["goomy_exp"]);
      sliggoo.gain_exp(save_data["sliggoo_exp"]);
      goodra.gain_exp(save_data["goodra_exp"]);
      basedata.sliggoo_gpsmult = 1.0 + 0.1 * sliggoo.level;
      goomy.level_cap = 100 + goodra.level;
      for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
        generator = generators[_j];
        generator.count = save_data.generators[generator.name].count;
        generator.level = save_data.generators[generator.name].level;
        generator.cost = generator.cost_f(generator.count);
        generator.lvup_cost = generator.base_cost * 100 * Math.pow(1.5, generator.level - 1);
      }
      recalc();
      return update_all_numbers();
    }
  };

  import_save = function(str) {
    var version;
    version = str.split("||", 1)[0];
    if (version === "0.10") {
      return _import_save_0_10(str);
    } else if (version === "0.05") {
      return _import_save_0_05(str);
    }
  };

  _import_save_0_10 = function(str) {
    var d02_basedata, d03_goomystats, d04_generators, d05_upgrades, d05_upgrades_bought, d05_upgrades_unlocked, data, datum, gen_data, generator_names, i, id, save, save_time, _j, _k, _ref;
    save = {};
    data = str.split("||", 6);
    save_time = new Date();
    save_time.setTime(parseInt(data[1]));
    save["save_time"] = save_time;
    d02_basedata = data[2].split("|");
    save["play_time"] = parseFloat(d02_basedata[0]);
    save["total_play_time"] = parseFloat(d02_basedata[1]);
    save["goomies"] = parseFloat(d02_basedata[2]);
    save["total_goomies"] = parseFloat(d02_basedata[3]);
    save["total_total_goomies"] = parseFloat(d02_basedata[4]);
    save["clicks"] = parseFloat(d02_basedata[5]);
    save["total_clicks"] = parseFloat(d02_basedata[6]);
    d03_goomystats = data[3].split("|");
    save["goomy_exp"] = parseInt(d03_goomystats[0]);
    save["sliggoo_exp"] = parseInt(d03_goomystats[1]);
    save["goodra_exp"] = parseInt(d03_goomystats[2]);
    generator_names = ["cursor", "youngster", "daycare", "reserve", "farm", "fountain", "cave", "trench", "arceus", "rngabuser", "cloninglab", "church", "gcminer", "photoncollider"];
    gen_data = {};
    d04_generators = data[4].split("|");
    for (i = _j = 0, _ref = 14 - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      datum = d04_generators[i].split(",");
      gen_data[generator_names[i]] = {
        count: parseInt(datum[0]),
        level: parseInt(datum[1])
      };
    }
    save["generators"] = gen_data;
    d05_upgrades = data[5].split("|");
    d05_upgrades_bought = sstr_to_bitfield(d05_upgrades[0]);
    d05_upgrades_unlocked = sstr_to_bitfield(d05_upgrades[1]);
    for (id = _k = 1; _k <= 200; id = ++_k) {
      if (item_ids[id]) {
        if (d05_upgrades_unlocked[id - 1] === "1") {
          item_ids[id].locked = false;
          if (d05_upgrades_bought[id - 1] === "1") {
            item_ids[id].bought = true;
          }
        }
      }
    }
    return save;
  };

  _import_save_0_05 = function(str) {
    var d02_basedata, d03_goomystats, d04_generators, data, datum, gen_data, generator_names, i, save, save_time, _j, _ref;
    save = {};
    data = str.split("||", 5);
    save_time = new Date();
    save_time.setTime(parseInt(data[1]));
    save["save_time"] = save_time;
    d02_basedata = data[2].split("|");
    save["play_time"] = parseFloat(d02_basedata[0]);
    save["total_play_time"] = parseFloat(d02_basedata[1]);
    save["goomies"] = parseFloat(d02_basedata[2]);
    save["total_goomies"] = parseFloat(d02_basedata[3]);
    save["total_total_goomies"] = parseFloat(d02_basedata[4]);
    save["clicks"] = parseFloat(d02_basedata[5]);
    save["total_clicks"] = parseFloat(d02_basedata[6]);
    d03_goomystats = data[3].split("|");
    save["goomy_exp"] = parseInt(d03_goomystats[0]);
    save["sliggoo_exp"] = parseInt(d03_goomystats[1]);
    save["goodra_exp"] = parseInt(d03_goomystats[2]);
    generator_names = ["cursor", "youngster", "daycare", "reserve", "farm", "fountain", "cave", "trench", "arceus", "rngabuser", "cloninglab", "church", "gcminer", "photoncollider"];
    gen_data = {};
    d04_generators = data[4].split("|");
    for (i = _j = 0, _ref = 14 - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      datum = d04_generators[i].split(",");
      gen_data[generator_names[i]] = {
        count: parseInt(datum[0]),
        level: parseInt(datum[1])
      };
    }
    save["generators"] = gen_data;
    return save;
  };

  update_numbers = function() {
    var goomy_str;
    goomy_str = basedata.goomies < 1e12 ? reprnum(Math.floor(basedata.goomies)) : reprnum(Math.floor(basedata.goomies), "long");
    $(".goomies").html(goomy_str);
    $("#stats_playtime").html(reprtime(basedata.play_time));
    $("#stats_goomies").html(reprnum(Math.floor(basedata.goomies), "long"));
    $("#stats_total_goomies").html(reprnum(Math.floor(basedata.total_goomies), "long"));
    $("#stats_exp").html(reprnum(Math.floor(goomy.exp)));
    $("#stats_exp_to_next_level").html(reprnum(goomy.next_lv_exp + goomy.lv_total_exp - Math.floor(goomy.exp)));
    if (shiny_goomy.time_left > 0) {
      if (shiny_goomy.effect === "raindance") {
        $("#rain_dance_time_left").html(reprsecs(shiny_goomy.time_left));
      } else if (shiny_goomy.effect === "clickmult") {
        $("#click_frenzy_time_left").html(reprsecs(shiny_goomy.time_left));
      }
    }
    return $("#level_progress").attr("value", goomy.exp - goomy.lv_total_exp);
  };

  update_all_numbers = function() {
    var generator, gps_str, item, _j, _k, _len1, _len2;
    update_numbers();
    gps_str = basedata.gps < 1000000 ? basedata.gps.toLocaleString(lang, {
      minimumFractionDigits: 1
    }) : reprnum(Math.floor(basedata.gps), "medium");
    $(".gps").html(gps_str);
    $("#stats_gps").html(gps_str);
    for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
      generator = generators[_j];
      $("#" + generator.name + "_cost").html(reprnum(Math.floor(generator.cost), "short"));
      if (__indexOf.call(ngens, generator) >= 0) {
        if (generator.count > 0) {
          $("#" + generator.name + "_count").html("x" + generator.count);
        } else {
          $("#" + generator.name + "_count").html("");
        }
      } else {
        $("#" + generator.name + "_count").html(generator.count);
      }
      $("#" + generator.name + "_gps").html(generator.gps < 1000000 ? generator.gps.toLocaleString(lang, {
        minimumFractionDigits: 1,
        maximumFractionDigits: 2
      }) : reprnum(Math.floor(generator.gps), "medium"));
      $("#" + generator.name + "_owned").html(generator.count);
      $("#" + generator.name + "_tooltip_cost").html(generator.cost < 1e12 ? reprnum(Math.floor(generator.cost)) : reprnum(Math.floor(generator.cost), "long"));
      $("#" + generator.name + "_level").html(generator.level);
      $("#" + generator.name + "_levelup_cost").html(reprnum(generator.lvup_cost, "short"));
    }
    if (("" + gens["cursor"].count).length >= langs[lang].cursor_abbrev_length + 2) {
      $("#cursor_counter").html("");
    } else if (("" + gens["cursor"].count).length >= langs[lang].cursor_abbrev_length) {
      $("#cursor_counter").html(langs[lang].cursor_counter_short);
    } else {
      $("#cursor_counter").html(langs[lang].cursor_counter);
    }
    if (("" + gens["youngster"].count).length >= langs[lang].youngster_abbrev_length + 2) {
      $("#youngster_counter").html("");
    } else if (("" + gens["youngster"].count).length >= langs[lang].youngster_abbrev_length) {
      $("#youngster_counter").html(langs[lang].youngster_counter_short);
    } else {
      $("#youngster_counter").html(langs[lang].youngster_counter);
    }
    for (_k = 0, _len2 = itemlist.length; _k < _len2; _k++) {
      item = itemlist[_k];
      if (item.locked && item.unlock_condition()) {
        item.locked = false;
        $("#items").append("				<div class='item' id='" + item.name + "'>					" + item.name + "				</div>			");
        $("#" + item.name).click((function(name) {
          return function() {
            if (items[name].buy()) {
              return $("#" + name).hide();
            }
          };
        })(item.name));
      }
    }
    if (goomy.level === goomy.level_cap) {
      $("#stats_next_level_row").hide();
    } else {
      $("#stats_next_level_row").show();
    }
    $(".level").html(goomy.level);
    $("#level_progress").attr("max", goomy.next_lv_exp);
    return $("#stats_next_level").html(goomy.level + 1);
  };

  update_language = function() {
    regenerate_tooltips();
    return update_all_numbers();
  };

  regenerate_tooltips = function() {
    var generator, item, _j, _k, _l, _len1, _len2, _len3, _results;
    for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
      generator = generators[_j];
      $("#" + generator.name).unbind();
      if ($(window).width() >= 1024) {
        $("#" + generator.name).click((function(name) {
          return function() {
            return gens[name].buy(1);
          };
        })(generator.name));
      }
    }
    $("#tooltips").empty();
    $(".qtip").empty();
    for (_k = 0, _len2 = generators.length; _k < _len2; _k++) {
      generator = generators[_k];
      $("#" + generator.name + "_description").html(langs[lang]["" + generator.name + "_description"]);
      $("#tooltips").append("<div class='generator-tooltip' id='" + generator.name + "_tooltip'></div>");
      $("#" + generator.name + "_tooltip").append(("<span id='" + generator.name + "_description'>") + langs[lang]["" + generator.name + "_description"] + "</span>" + ("			<hr />			<span class='lang_tooltip_gps_pre'>Each one produces </span>			<span class='tooltip-gps' id='" + generator.name + "_gps'></span>			<span class='lang_tooltip_gps_post'> Goomies per second</span>			<br />			<span class='lang_tooltip_owned_pre'>You own </span>			<span class='tooltip-gps' id='" + generator.name + "_owned'></span>			<span class='lang_tooltip_owned_post'></span>			<br />			<span class='lang_tooltip_cost_pre'>To buy one costs </span>			<span class='tooltip-gps' id='" + generator.name + "_tooltip_cost'></span>			<span class='lang_tooltip_cost_post'> Goomies</span>			<br />			<button class='tooltip-buy-button lang_tooltip_buy1' id='" + generator.name + "_buy1'>Buy 1</button>			<button class='tooltip-buy-button lang_tooltip_buy10' id='" + generator.name + "_buy10'>Buy 10</button>			<button class='tooltip-buy-button lang_tooltip_buy100' id='" + generator.name + "_buy100'>Buy 100</button>			<button class='tooltip-buy-button lang_tooltip_sell1' id='" + generator.name + "_sell1'>Sell 1</button>			<hr />			<span class='lang_tooltip_level_pre'>Level </span>			<span class='tooltip-gps' id='" + generator.name + "_level'></span>			<span class='lang_tooltip_level_post'></span>			<button id='" + generator.name + "_levelup' class='tooltip-buy-button'>Level up for <span id='" + generator.name + "_levelup_cost'></span></button>		"));
      $("#" + generator.name).qtip({
        content: {
          title: langs[lang]["" + generator.name + "_name"],
          text: $($("#" + generator.name + "_tooltip")[0])
        },
        style: {
          classes: "qtip-dark",
          width: 300
        },
        position: {
          my: $(window).width() > 1024 ? "right center" : "bottom left",
          at: $(window).width() > 1024 ? "left center" : "top left",
          viewport: $(window)
        },
        show: {
          delay: 0
        },
        hide: {
          fixed: true,
          delay: 100
        }
      });
      $("#" + generator.name + "_buy1").click((function(name) {
        return function() {
          return gens[name].buy(1);
        };
      })(generator.name));
      $("#" + generator.name + "_buy10").click((function(name) {
        return function() {
          return gens[name].buy(10);
        };
      })(generator.name));
      $("#" + generator.name + "_buy100").click((function(name) {
        return function() {
          return gens[name].buy(100);
        };
      })(generator.name));
      $("#" + generator.name + "_sell1").click((function(name) {
        return function() {
          return gens[name].sell(1);
        };
      })(generator.name));
      $("#" + generator.name + "_levelup").click((function(name) {
        return function() {
          return gens[name].levelup();
        };
      })(generator.name));
    }
    $(".lang_tooltip_gps_pre").html(langs[lang]["tooltip_gps_pre"]);
    $(".lang_tooltip_gps_post").html(langs[lang]["tooltip_gps_post"]);
    $(".lang_tooltip_owned_pre").html(langs[lang]["tooltip_owned_pre"]);
    $(".lang_tooltip_owned_post").html(langs[lang]["tooltip_owned_post"]);
    $(".lang_tooltip_cost_pre").html(langs[lang]["tooltip_cost_pre"]);
    $(".lang_tooltip_cost_post").html(langs[lang]["tooltip_cost_post"]);
    $(".lang_tooltip_buy1").html(langs[lang]["tooltip_buy1"]);
    $(".lang_tooltip_buy10").html(langs[lang]["tooltip_buy10"]);
    $(".lang_tooltip_buy100").html(langs[lang]["tooltip_buy100"]);
    $(".lang_tooltip_sell1").html(langs[lang]["tooltip_sell1"]);
    _results = [];
    for (_l = 0, _len3 = itemlist.length; _l < _len3; _l++) {
      item = itemlist[_l];
      if (!item.locked && !item.bought) {
        $("#tooltips").append("<div class='item-tooltip' id='" + item.name + "_tooltip'></div>");
        $("#" + item.name + "_tooltip").append(("<p id='" + item.name + "_description'>") + langs[lang]["" + item.name + "_description"] + "</p>" + ("				<br />				Cost: <span class='tooltip-gps' id='" + item.name + "_tooltip_cost'></span> Goomies				<hr />") + ("<span id='" + item.name + "_flavourtext'>") + langs[lang]["" + item.name + "_caption"] + "</span>");
        $("#" + item.name + "_tooltip_cost").html(item.cost < 1e12 ? reprnum(Math.floor(item.cost)) : reprnum(Math.floor(item.cost), "long"));
        _results.push($("#" + item.name).qtip({
          content: {
            title: langs[lang]["" + item.name + "_name"],
            text: $($("#" + item.name + "_tooltip")[0])
          },
          style: {
            classes: "qtip-dark",
            width: 300
          },
          position: {
            my: $(window).width() > 1024 ? "right center" : "bottom left",
            at: $(window).width() > 1024 ? "left center" : "top left",
            viewport: $(window)
          },
          show: {
            delay: 0
          },
          hide: {
            delay: 100
          }
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  $(window).resize(function() {
    regenerate_tooltips();
    return update_all_numbers();
  });

  last_update_time = new Date();

  updateF = function(ms) {
    basedata.update(ms);
    shiny_goomy.update(ms);
    update_numbers(ms);
    return animate_plus_markers(ms);
  };

  update = function() {
    var ms, new_update_time;
    new_update_time = new Date();
    ms = new_update_time.getTime() - last_update_time.getTime();
    last_update_time.setTime(new_update_time.getTime());
    return updateF(ms);
  };

  plus_marker_id = 0;

  plus_marker_anims = 1000;

  plus_marker_distance = 100;

  plus_marker_origradius = 20;

  PlusMarker = (function() {

    function PlusMarker(caption, x, y, anims) {
      this.id = plus_marker_id;
      plus_marker_id += 1;
      plus_markers[this.id] = this;
      this.caption = caption;
      this.init_anims = anims ? anims : plus_marker_anims;
      this.anims = this.init_anims;
      $("#gamearea").append("<div class='plus_marker' id='plus_marker_" + this.id + "'>" + this.caption + "</div>");
      this.orig_x = Math.max(0, Math.min($(window).width() - $("#plus_marker_" + this.id).width(), x - $("#plus_marker_" + this.id).width() / 2));
      this.orig_y = Math.max(0, Math.min($(window).height() - $("#plus_marker_" + this.id).height(), y - $("#plus_marker_" + this.id).height() / 2));
      this.x = this.orig_x;
      this.y = this.orig_y;
      this.opacity = 1;
      $("#plus_marker_" + this.id).css({
        left: this.x,
        top: this.y,
        opacity: this.opacity
      });
    }

    PlusMarker.prototype.update = function(ms) {
      var move_fraction;
      this.anims -= ms;
      if (this.anims <= 0) {
        $("#plus_marker_" + this.id).remove();
        delete plus_markers[this.id];
        return;
      }
      move_fraction = this.anims / this.init_anims;
      this.y = Math.max(0, this.orig_y - plus_marker_distance + plus_marker_distance * move_fraction * move_fraction);
      this.opacity = move_fraction;
      return $("#plus_marker_" + this.id).css({
        left: this.x,
        top: this.y,
        opacity: this.opacity
      });
    };

    return PlusMarker;

  })();

  plus_markers = {};

  this.plus_markers = plus_markers;

  animate_plus_markers = function(ms) {
    var id, plus_marker, _results;
    _results = [];
    for (id in plus_markers) {
      if (!__hasProp.call(plus_markers, id)) continue;
      plus_marker = plus_markers[id];
      _results.push(plus_marker.update(ms));
    }
    return _results;
  };

  recalc = function() {
    recalc_gps();
    recalc_gpc();
    return update_all_numbers();
  };

  recalc_gps = function() {
    var new_gps, _j, _k, _len1, _len2;
    gens["youngster"].base_gps = 1.0;
    if (items["ball01"].bought) {
      gens["youngster"].base_gps += 0.5;
    }
    if (items["ball02"].bought) {
      gens["youngster"].base_gps += 1.0;
    }
    if (items["ball99"].bought) {
      gens["youngster"].base_gps += 100.0;
    }
    for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
      gen = generators[_j];
      gen.level_mult = Math.pow(1.3, gen.level - 1);
      gen.gps = gen.base_gps * gen.level_mult;
    }
    if (items["youngster01"].bought) {
      gens["youngster"].gps *= 2;
      gens["daycare"].gps *= 4;
    }
    if (items["youngster02"].bought) {
      gens["youngster"].gps *= 2;
      gens["reserve"].gps *= 4;
    }
    if (items["youngster03"].bought) {
      gens["youngster"].gps *= 2;
      gens["farm"].gps *= 4;
    }
    if (items["youngster04"].bought) {
      gens["youngster"].gps *= 2;
      gens["fountain"].gps *= 4;
    }
    if (items["youngster05"].bought) {
      gens["youngster"].gps *= 2;
      gens["cave"].gps *= 4;
    }
    if (items["youngster06"].bought) {
      gens["youngster"].gps *= 2;
      gens["trench"].gps *= 4;
    }
    if (items["youngster07"].bought) {
      gens["youngster"].gps *= 2;
      gens["arceus"].gps *= 4;
    }
    if (items["youngster08"].bought) {
      gens["youngster"].gps *= 2;
      gens["rngabuser"].gps *= 4;
    }
    if (items["youngster09"].bought) {
      gens["youngster"].gps *= 2;
      gens["cloninglab"].gps *= 4;
    }
    if (items["youngster10"].bought) {
      gens["youngster"].gps *= 2;
      gens["church"].gps *= 4;
    }
    if (items["youngster11"].bought) {
      gens["youngster"].gps *= 2;
      gens["gcminer"].gps *= 4;
    }
    if (items["youngster12"].bought) {
      gens["youngster"].gps *= 2;
      gens["photoncollider"].gps *= 4;
    }
    basedata.expps = 0.2 * gens["cursor"].count;
    new_gps = 0;
    for (_k = 0, _len2 = generators.length; _k < _len2; _k++) {
      gen = generators[_k];
      new_gps += gen.count * gen.gps;
    }
    new_gps *= basedata.sliggoo_gpsmult;
    new_gps *= basedata.raindance_mult;
    return basedata.gps = new_gps;
  };

  recalc_gpc = function() {
    var new_gpc, _j, _len1;
    new_gpc = 0;
    new_gpc += goomy.level;
    for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
      gen = generators[_j];
      if (items["gcm1"].bought) {
        new_gpc += gen.count * (goomy.level - 5) * 0.1;
      }
      if (items["gcm2"].bought) {
        new_gpc += gen.count * (goomy.level - 10) * 0.2;
      }
      if (items["gcm3"].bought) {
        new_gpc += gen.count * (goomy.level - 20) * 0.5;
      }
      if (items["gcm4"].bought) {
        new_gpc += gen.count * (goomy.level - 40) * 2.0;
      }
      if (items["gcm5"].bought) {
        new_gpc += gen.count * (goomy.level - 80) * 10.0;
      }
    }
    new_gpc *= Math.pow(1.1, gens["cursor"].level - 1);
    new_gpc *= basedata.raindance_mult;
    new_gpc *= basedata.frenzy_clickmult;
    return basedata.gpc = new_gpc;
  };

  save_to_local_storage = function() {
    return window.localStorage["gc2.savefile"] = sstr_to_b64(export_save());
  };

  hexstr = "0123456789abcdef";

  bitmap = {
    "0": "0000",
    "1": "0001",
    "2": "0010",
    "3": "0011",
    "4": "0100",
    "5": "0101",
    "6": "0110",
    "7": "0111",
    "8": "1000",
    "9": "1001",
    "a": "1010",
    "b": "1011",
    "c": "1100",
    "d": "1101",
    "e": "1110",
    "f": "1111"
  };

  bitfield_to_sstr = function(bitfield) {
    var a, i, len, lenstr, output, _j, _k, _ref, _ref1;
    output = "";
    while (bitfield.length % 8 !== 0) {
      bitfield += "0";
    }
    len = bitfield.length / 8;
    lenstr = "" + len;
    for (i = _j = 1, _ref = lenstr.length; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
      output += "`";
    }
    output += lenstr;
    for (a = _k = 0, _ref1 = bitfield.length - 1; _k <= _ref1; a = _k += 4) {
      output += hexstr[parseInt(bitfield.substr(a, 4), 2)];
    }
    return output;
  };

  sstr_to_bitfield = function(sstr) {
    var char, len, output, _j, _len1;
    output = "";
    len = 0;
    for (_j = 0, _len1 = sstr.length; _j < _len1; _j++) {
      char = sstr[_j];
      if (char === "`") {
        len += 1;
      } else if (len > 0) {
        len -= 1;
      } else {
        output += bitmap[char];
      }
    }
    return output;
  };

  export_save = function() {
    var d01_version, d02_savetime, d03_basedata, d04_goomystats, d05_generators, d06_upgrades;
    d01_version = "0.10";
    d02_savetime = "" + new Date().getTime();
    d03_basedata = [basedata.game_started ? repr_sstr(basedata.play_time) : "-1", repr_sstr(basedata.total_play_time), repr_sstr(Math.floor(basedata.goomies)), repr_sstr(Math.floor(basedata.total_goomies)), repr_sstr(Math.floor(basedata.total_total_goomies)), repr_sstr(basedata.clicks), repr_sstr(basedata.total_clicks)].join("|");
    d04_goomystats = [repr_sstr(Math.floor(goomy.exp)), repr_sstr(Math.floor(sliggoo.exp)), repr_sstr(Math.floor(goodra.exp))].join("|");
    d05_generators = (function() {
      var gen_stat_string, gen_stats, generator, _j, _len1;
      gen_stats = [];
      for (_j = 0, _len1 = generators.length; _j < _len1; _j++) {
        generator = generators[_j];
        gen_stat_string = [generator.count, generator.level].join(",");
        gen_stats.push(gen_stat_string);
      }
      return gen_stats.join("|");
    })();
    d06_upgrades = (function() {
      var i, upgrade_bought, upgrade_unlocked, _j;
      upgrade_bought = "";
      upgrade_unlocked = "";
      for (i = _j = 1; _j <= 200; i = ++_j) {
        if (item_ids[i] && item_ids[i].bought) {
          upgrade_bought += "1";
        } else {
          upgrade_bought += "0";
        }
        if (item_ids[i] && !item_ids[i].locked) {
          upgrade_unlocked += "1";
        } else {
          upgrade_unlocked += "0";
        }
      }
      return bitfield_to_sstr(upgrade_unlocked) + "|" + bitfield_to_sstr(upgrade_bought);
    })();
    return [d01_version, d02_savetime, d03_basedata, d04_goomystats, d05_generators, d06_upgrades].join("||");
  };

  /*
  
  Shiny Goomy effects
  
  Effect             Prob.     Description
  -------------      ------    -----------
  Goomy Bonus        60.00%    Give a huge bonus of Goomies.
  Rain Dance         33.50%    Gives both clicking and GpS a x12 boost for 70.4 seconds.
  Click Frenzy        5.00%    Gives clicking a x704 GpC boost for 7.04 seconds.
  Click EXP Frenzy    0.95%    Gives clicking a x10 EXP/click boost for 20 seconds.
  Level Up            0.45%    Levels a random generator up once.
                      0.10%
  */


  init_cooldown_time = 200000;

  shiny_goomy = {
    enabled: false,
    appeared: false,
    opacity: 0,
    x: 0,
    y: 0,
    effect: "none",
    time_left: 0,
    cooldown_time: init_cooldown_time,
    clicks: 0,
    total_clicks: 0,
    update: function(ms) {
      var spinner,
        _this = this;
      if (!this.enabled) {
        return this.enabled = true;
      } else if (this.time_left > 0) {
        this.time_left -= ms;
        if (this.time_left <= 0) {
          if (this.effect === "raindance") {
            basedata.raindance_mult = 1.0;
            $("#shiny_goomy_rain_dance").hide();
            recalc();
          }
          if (this.effect === "clickmult") {
            basedata.frenzy_clickmult = 1.0;
            $("#shiny_goomy_click_frenzy").hide();
            recalc();
          }
          if (this.effect === "clickexp") {
            basedata.exp_clickmult = 1.0;
            $("#shiny_goomy_exp_click_frenzy").hide();
            return recalc();
          }
        }
      } else if (this.appeared) {
        if (this.opacity < 1) {
          this.opacity = Math.min(1, this.opacity + ms / 2000);
          return $("#shiny_goomy").css({
            opacity: this.opacity
          });
        }
      } else {
        if (this.cooldown_time > 0) {
          return this.cooldown_time -= ms;
        } else if (Math.random() > Math.pow(0.995, ms / 1000)) {
          this.appeared = true;
          this.x = Math.random() * ($(window).width() - $("#shiny_goomy").width());
          this.y = Math.random() * ($(window).height() - $("#shiny_goomy").height());
          spinner = Math.random();
          if (spinner < 0.6) {
            this.effect = "goomies";
          } else if (spinner < 0.935) {
            this.effect = "raindance";
          } else if (spinner < 0.985) {
            this.effect = "clickmult";
          } else if (spinner < 0.9945) {
            this.effect = "clickexp";
          } else if (spinner < 0.999) {
            this.effect = "levelup";
          } else {
            this.effect = "goomies";
          }
          $("#shiny_goomy").show();
          $("#shiny_goomy").css({
            left: this.x,
            top: this.y,
            opacity: 0
          });
          return $("#shiny_goomy").click(function(e) {
            return _this.click(e.pageX, e.pageY);
          });
        }
      }
    },
    click: function(x, y) {
      var gain, shiny_plus_marker;
      $("#shiny_goomy").unbind();
      $("#shiny_goomy").hide();
      this.appeared = false;
      this.opacity = 0;
      basedata.clicks += 1;
      basedata.total_clicks += 1;
      this.cooldown_time = init_cooldown_time;
      if (this.effect === "goomies") {
        gain = basedata.gps * 120 + basedata.gpc * 200;
        shiny_plus_marker = new PlusMarker(langs[lang]["shiny_goomies_pre"] + reprnum(Math.floor(gain), "long") + langs[lang]["shiny_goomies_post"], x, y, 3000);
        basedata.earn(gain);
        return gain;
      } else if (this.effect === "raindance") {
        this.time_left = 70400;
        basedata.raindance_mult = 12.0;
        recalc();
        $("#shiny_goomy_rain_dance").show();
        return shiny_plus_marker = new PlusMarker(langs[lang]["shiny_raindance"], x, y, 3000);
      } else if (this.effect === "clickmult") {
        this.time_left = 7040;
        basedata.frenzy_clickmult = 704.0;
        recalc();
        $("#shiny_goomy_click_frenzy").show();
        return shiny_plus_marker = new PlusMarker(langs[lang]["shiny_clickmult"], x, y, 3000);
      } else if (this.effect === "clickexp") {
        this.time_left = 20000;
        basedata.exp_clickmult = 12.0;
        recalc();
        $("#shiny_goomy_exp_click_frenzy").show();
        return shiny_plus_marker = new PlusMarker(langs[lang]["shiny_clickexp"], x, y, 3000);
      }
    }
  };

  this.click_on_shiny_goomy = shiny_goomy.click;

  start_if_loaded = function() {
    init_input();
    change_language(lang);
    load_save_from_local_storage();
    setInterval(update, 20);
    return setInterval(save_to_local_storage, 10000);
  };

  startup = function() {
    return start_if_loaded();
  };

  $(document).ready(startup);

  gcm1 = new Item("gcm1", 1);

  gcm1.unlock_condition = function() {
    return goomy.level >= 5;
  };

  gcm1.cost = 1e4;

  gcm2 = new Item("gcm2", 2);

  gcm2.unlock_condition = function() {
    return goomy.level >= 10;
  };

  gcm2.cost = 1e5;

  gcm3 = new Item("gcm3", 3);

  gcm3.unlock_condition = function() {
    return goomy.level >= 20;
  };

  gcm3.cost = 1e7;

  gcm4 = new Item("gcm4", 4);

  gcm4.unlock_condition = function() {
    return goomy.level >= 40;
  };

  gcm4.cost = 1e10;

  gcm5 = new Item("gcm5", 5);

  gcm5.unlock_condition = function() {
    return goomy.level >= 80;
  };

  gcm5.cost = 1e14;

  click1 = new Item("click1", 6);

  click1.unlock_condition = function() {
    return goomy.level >= 100;
  };

  click1.cost = 1e16;

  ball01 = new Item("ball01", 7);

  ball01.unlock_condition = function() {
    return goomy.level >= 10 && gens["youngster"].count >= 10;
  };

  ball01.cost = 1e4;

  ball02 = new Item("ball02", 8);

  ball02.unlock_condition = function() {
    return goomy.level >= 30 && gens["youngster"].count >= 50;
  };

  ball02.cost = 1e8;

  ball99 = new Item("ball99", 9);

  ball99.unlock_condition = function() {
    return goomy.level >= 100;
  };

  ball99.cost = 1e15;

  youngster01 = new Item("youngster01", 51);

  youngster01.unlock_condition = function() {
    return gens["daycare"].count >= 50 && gens["youngster"].count >= 100;
  };

  youngster01.cost = 6e6;

  youngster02 = new Item("youngster02", 52);

  youngster02.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 200;
  };

  youngster02.cost = 3e7;

  youngster03 = new Item("youngster03", 53);

  youngster03.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 300;
  };

  youngster03.cost = 15e7;

  youngster04 = new Item("youngster04", 54);

  youngster04.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 400;
  };

  youngster04.cost = 7e8;

  youngster05 = new Item("youngster05", 55);

  youngster05.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 500;
  };

  youngster05.cost = 4e9;

  youngster06 = new Item("youngster06", 56);

  youngster06.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 600;
  };

  youngster06.cost = 24e9;

  youngster07 = new Item("youngster07", 57);

  youngster07.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 700;
  };

  youngster07.cost = 2e11;

  youngster08 = new Item("youngster08", 58);

  youngster08.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 800;
  };

  youngster08.cost = 134217728e4;

  youngster09 = new Item("youngster09", 59);

  youngster09.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 900;
  };

  youngster09.cost = 1.44e13;

  youngster10 = new Item("youngster10", 60);

  youngster10.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 1000;
  };

  youngster10.cost = 24.192e13;

  youngster11 = new Item("youngster11", 61);

  youngster11.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 1100;
  };

  youngster11.cost = 5497558138880000;

  youngster12 = new Item("youngster12", 62);

  youngster12.unlock_condition = function() {
    return gens["reserve"].count >= 50 && gens["youngster"].count >= 1200;
  };

  youngster12.cost = 259020683712000000;

  youngsterpocalypse = {
    started: false,
    time_left: 259200000
  };

  this.export_save = save_to_local_storage;

  this.import_save = load_save_from_local_storage;

  this.gens = gens;

  this.items = items;

  this.update_language = update_language;

  this.bitfield_to_sstr = bitfield_to_sstr;

}).call(this);
